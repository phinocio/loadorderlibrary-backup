name: Create Production Container

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: loadorderlibrary-backup
  REGISTRY: ghcr.io

jobs:
  build-app:
    name: Build Production Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

        # It's just urls that aren't actually secret so eh.
      - name: Create .env file
        run: |
          touch .env
          echo API_URL="${{ secrets.PROD_API_URL }}" >> .env
          echo PUBLIC_API_URL="${{ secrets.PROD_API_URL }}" >> .env
          echo PUBLIC_APP_URL="${{ secrets.PROD_APP_URL }}" >> .env

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@v5
        with:
          file: docker/prod/app/Dockerfile
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

          # - name: Generate artifact attestation
          #   uses: actions/attest-build-provenance@v1
          #   with:
          #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          #     subject-digest: ${{ steps.push.outputs.digest }}
          #     push-to-registry: true

  deploy:
    name: Deploy Container to Server
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: SSH and deploy
        run: |
          echo "${{ secrets.PROD_KEY }}" > id_meow
          chmod 600 id_meow
          ssh -p ${{ secrets.PROD_PORT }} -i id_meow "${{ secrets.PROD_USER }}"@"${{ secrets.PROD_HOST }}" -o "StrictHostKeyChecking no" "sudo ${{ secrets.PROD_DEPLOY }}"

  clean:
    name: Clean untagged packages
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/delete-package-versions@v5
        with:
          package-name: "loadorderlibrary-backup"
          package-type: "container"
          min-versions-to-keep: 1
          delete-only-untagged-versions: "true"
          token: ${{ secrets.PKGS_DEL }}
